{"version":3,"sources":["webpack:///./node_modules/@deckdeckgo/qrcode/dist/esm/legacy/deckgo-qrcode.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;AACgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mBAAmB;AACpD;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,oBAAoB;AAC9D,kDAAkD;AAClD,qCAAqC,0BAA0B;AAC/D;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA,+BAA+B,4BAA4B;AAC3D;AACA,kDAAkD,oBAAoB;AACtE,0DAA0D;AAC1D,6CAA6C,aAAa;AAC1D,0DAA0D;AAC1D,2DAA2D;AAC3D;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD;AACA,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B,cAAc;AACzyBAAyB;AACrE;AACA,4CAA4C,mBAAmB;AAC/D;AACA,4CAA4C,mBAAmB;AAC/D;AACA,4CAA4C,yBAAyB;AACrE;AACA,4CAA4C,yDAAyD;AACrG;AACA,4CAA4C,uCAAuC;AACnF;AACA,4CAA4C,6CAA6C;AACzF;AACA,4CAA4C,6CAA6C;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD,iCAAiC,mBAAmB;AACpD;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uBAAuB;AACpD,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD,iCAAiC,mBAAmB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA,2BAA2B,mBAAmvC;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC,oDAAoD;AACrD;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS,EAAE,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS,EAAE,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAC,SAAS,mCAAmC,EAAE,4DAAC,UAAU,eAAe;AACxF;AACA;AACA,0BAA0B,QAAQ,4DAAU,OAAO,EAAE;AACrD;AACA;AACA,KAAK;AACL;AACA,0BAA0B,eAAe,kBAAkB,kCAAkC,4DAA4D,gCAAgC,gCAAgC,iCAAiC,0CAA0C,qCAAqC,sDAAsD,qCAAqC,qCAAqC,uBAAuB,sFAAsF,uFAAuF,kBAAkB,QAAQ,SAAS,uCAAuC,+BAA+B,EAAE,EAAE;AAC1vB;AACA;AACA,KAAK;AACL;AACA,CAAC;AAC4C","file":"109.2e4edce0658c8b05c4d4.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { r as registerInstance, h, g as getElement } from './chunk-69405405.js';\n//---------------------------------------------------------------------\n//\n// QR Code Generator for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//  http://www.opensource.org/licenses/mit-license.php\n//\n// The word 'QR Code' is registered trademark of\n// DENSO WAVE INCORPORATED\n//  http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\nvar qrcode = function () {\n    //---------------------------------------------------------------------\n    // qrcode\n    //---------------------------------------------------------------------\n    /**\n     * qrcode\n     * @param typeNumber 1 to 40\n     * @param errorCorrectionLevel 'L','M','Q','H'\n     */\n    var qrcode = function (typeNumber, errorCorrectionLevel) {\n        var PAD0 = 0xEC;\n        var PAD1 = 0x11;\n        var _typeNumber = typeNumber;\n        var _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];\n        var _modules = null;\n        var _moduleCount = 0;\n        var _dataCache = null;\n        var _dataList = [];\n        var _this = {};\n        var makeImpl = function (test, maskPattern) {\n            _moduleCount = _typeNumber * 4 + 17;\n            _modules = function (moduleCount) {\n                var modules = new Array(moduleCount);\n                for (var row = 0; row < moduleCount; row += 1) {\n                    modules[row] = new Array(moduleCount);\n                    for (var col = 0; col < moduleCount; col += 1) {\n                        modules[row][col] = null;\n                    }\n                }\n                return modules;\n            }(_moduleCount);\n            setupPositionProbePattern(0, 0);\n            setupPositionProbePattern(_moduleCount - 7, 0);\n            setupPositionProbePattern(0, _moduleCount - 7);\n            setupPositionAdjustPattern();\n            setupTimingPattern();\n            setupTypeInfo(test, maskPattern);\n            if (_typeNumber >= 7) {\n                setupTypeNumber(test);\n            }\n            if (_dataCache == null) {\n                _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);\n            }\n            mapData(_dataCache, maskPattern);\n        };\n        var setupPositionProbePattern = function (row, col) {\n            for (var r = -1; r <= 7; r += 1) {\n                if (row + r <= -1 || _moduleCount <= row + r)\n                    continue;\n                for (var c = -1; c <= 7; c += 1) {\n                    if (col + c <= -1 || _moduleCount <= col + c)\n                        continue;\n                    if ((0 <= r && r <= 6 && (c == 0 || c == 6))\n                        || (0 <= c && c <= 6 && (r == 0 || r == 6))\n                        || (2 <= r && r <= 4 && 2 <= c && c <= 4)) {\n                        _modules[row + r][col + c] = true;\n                    }\n                    else {\n                        _modules[row + r][col + c] = false;\n                    }\n                }\n            }\n        };\n        var getBestMaskPattern = function () {\n            var minLostPoint = 0;\n            var pattern = 0;\n            for (var i = 0; i < 8; i += 1) {\n                makeImpl(true, i);\n                var lostPoint = QRUtil.getLostPoint(_this);\n                if (i == 0 || minLostPoint > lostPoint) {\n                    minLostPoint = lostPoint;\n                    pattern = i;\n                }\n            }\n            return pattern;\n        };\n        var setupTimingPattern = function () {\n            for (var r = 8; r < _moduleCount - 8; r += 1) {\n                if (_modules[r][6] != null) {\n                    continue;\n                }\n                _modules[r][6] = (r % 2 == 0);\n            }\n            for (var c = 8; c < _moduleCount - 8; c += 1) {\n                if (_modules[6][c] != null) {\n                    continue;\n                }\n                _modules[6][c] = (c % 2 == 0);\n            }\n        };\n        var setupPositionAdjustPattern = function () {\n            var pos = QRUtil.getPatternPosition(_typeNumber);\n            for (var i = 0; i < pos.length; i += 1) {\n                for (var j = 0; j < pos.length; j += 1) {\n                    var row = pos[i];\n                    var col = pos[j];\n                    if (_modules[row][col] != null) {\n                        continue;\n                    }\n                    for (var r = -2; r <= 2; r += 1) {\n                        for (var c = -2; c <= 2; c += 1) {\n                            if (r == -2 || r == 2 || c == -2 || c == 2\n                                || (r == 0 && c == 0)) {\n                                _modules[row + r][col + c] = true;\n                            }\n                            else {\n                                _modules[row + r][col + c] = false;\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        var setupTypeNumber = function (test) {\n            var bits = QRUtil.getBCHTypeNumber(_typeNumber);\n            for (var i = 0; i < 18; i += 1) {\n                var mod = (!test && ((bits >> i) & 1) == 1);\n                _modules[Math.floor(i / 3)][i % 3 + _moduleCount - 8 - 3] = mod;\n            }\n            for (var i = 0; i < 18; i += 1) {\n                var mod = (!test && ((bits >> i) & 1) == 1);\n                _modules[i % 3 + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n            }\n        };\n        var setupTypeInfo = function (test, maskPattern) {\n            var data = (_errorCorrectionLevel << 3) | maskPattern;\n            var bits = QRUtil.getBCHTypeInfo(data);\n            // vertical\n            for (var i = 0; i < 15; i += 1) {\n                var mod = (!test && ((bits >> i) & 1) == 1);\n                if (i < 6) {\n                    _modules[i][8] = mod;\n                }\n                else if (i < 8) {\n                    _modules[i + 1][8] = mod;\n                }\n                else {\n                    _modules[_moduleCount - 15 + i][8] = mod;\n                }\n            }\n            // horizontal\n            for (var i = 0; i < 15; i += 1) {\n                var mod = (!test && ((bits >> i) & 1) == 1);\n                if (i < 8) {\n                    _modules[8][_moduleCount - i - 1] = mod;\n                }\n                else if (i < 9) {\n                    _modules[8][15 - i - 1 + 1] = mod;\n                }\n                else {\n                    _modules[8][15 - i - 1] = mod;\n                }\n            }\n            // fixed module\n            _modules[_moduleCount - 8][8] = (!test);\n        };\n        var mapData = function (data, maskPattern) {\n            var inc = -1;\n            var row = _moduleCount - 1;\n            var bitIndex = 7;\n            var byteIndex = 0;\n            var maskFunc = QRUtil.getMaskFunction(maskPattern);\n            for (var col = _moduleCount - 1; col > 0; col -= 2) {\n                if (col == 6)\n                    col -= 1;\n                while (true) {\n                    for (var c = 0; c < 2; c += 1) {\n                        if (_modules[row][col - c] == null) {\n                            var dark = false;\n                            if (byteIndex < data.length) {\n                                dark = (((data[byteIndex] >>> bitIndex) & 1) == 1);\n                            }\n                            var mask = maskFunc(row, col - c);\n                            if (mask) {\n                                dark = !dark;\n                            }\n                            _modules[row][col - c] = dark;\n                            bitIndex -= 1;\n                            if (bitIndex == -1) {\n                                byteIndex += 1;\n                                bitIndex = 7;\n                            }\n                        }\n                    }\n                    row += inc;\n                    if (row < 0 || _moduleCount <= row) {\n                        row -= inc;\n                        inc = -inc;\n                        break;\n                    }\n                }\n            }\n        };\n        var createBytes = function (buffer, rsBlocks) {\n            var offset = 0;\n            var maxDcCount = 0;\n            var maxEcCount = 0;\n            var dcdata = new Array(rsBlocks.length);\n            var ecdata = new Array(rsBlocks.length);\n            for (var r = 0; r < rsBlocks.length; r += 1) {\n                var dcCount = rsBlocks[r].dataCount;\n                var ecCount = rsBlocks[r].totalCount - dcCount;\n                maxDcCount = Math.max(maxDcCount, dcCount);\n                maxEcCount = Math.max(maxEcCount, ecCount);\n                dcdata[r] = new Array(dcCount);\n                for (var i = 0; i < dcdata[r].length; i += 1) {\n                    dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\n                }\n                offset += dcCount;\n                var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n                var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\n                var modPoly = rawPoly.mod(rsPoly);\n                ecdata[r] = new Array(rsPoly.getLength() - 1);\n                for (var i = 0; i < ecdata[r].length; i += 1) {\n                    var modIndex = i + modPoly.getLength() - ecdata[r].length;\n                    ecdata[r][i] = (modIndex >= 0) ? modPoly.getAt(modIndex) : 0;\n                }\n            }\n            var totalCodeCount = 0;\n            for (var i = 0; i < rsBlocks.length; i += 1) {\n                totalCodeCount += rsBlocks[i].totalCount;\n            }\n            var data = new Array(totalCodeCount);\n            var index = 0;\n            for (var i = 0; i < maxDcCount; i += 1) {\n                for (var r = 0; r < rsBlocks.length; r += 1) {\n                    if (i < dcdata[r].length) {\n                        data[index] = dcdata[r][i];\n                        index += 1;\n                    }\n                }\n            }\n            for (var i = 0; i < maxEcCount; i += 1) {\n                for (var r = 0; r < rsBlocks.length; r += 1) {\n                    if (i < ecdata[r].length) {\n                        data[index] = ecdata[r][i];\n                        index += 1;\n                    }\n                }\n            }\n            return data;\n        };\n        var createData = function (typeNumber, errorCorrectionLevel, dataList) {\n            var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectionLevel);\n            var buffer = qrBitBuffer();\n            for (var i = 0; i < dataList.length; i += 1) {\n                var data = dataList[i];\n                buffer.put(data.getMode(), 4);\n                buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));\n                data.write(buffer);\n            }\n            // calc num max data.\n            var totalDataCount = 0;\n            for (var i = 0; i < rsBlocks.length; i += 1) {\n                totalDataCount += rsBlocks[i].dataCount;\n            }\n            if (buffer.getLengthInBits() > totalDataCount * 8) {\n                throw 'code length overflow. ('\n                    + buffer.getLengthInBits()\n                    + '>'\n                    + totalDataCount * 8\n                    + ')';\n            }\n            // end code\n            if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n                buffer.put(0, 4);\n            }\n            // padding\n            while (buffer.getLengthInBits() % 8 != 0) {\n                buffer.putBit(false);\n            }\n            // padding\n            while (true) {\n                if (buffer.getLengthInBits() >= totalDataCount * 8) {\n                    break;\n                }\n                buffer.put(PAD0, 8);\n                if (buffer.getLengthInBits() >= totalDataCount * 8) {\n                    break;\n                }\n                buffer.put(PAD1, 8);\n            }\n            return createBytes(buffer, rsBlocks);\n        };\n        _this.addData = function (data, mode) {\n            mode = mode || 'Byte';\n            var newData = null;\n            switch (mode) {\n                case 'Numeric':\n                    newData = qrNumber(data);\n                    break;\n                case 'Alphanumeric':\n                    newData = qrAlphaNum(data);\n                    break;\n                case 'Byte':\n                    newData = qr8BitByte(data);\n                    break;\n                case 'Kanji':\n                    newData = qrKanji(data);\n                    break;\n                default:\n                    throw 'mode:' + mode;\n            }\n            _dataList.push(newData);\n            _dataCache = null;\n        };\n        _this.isDark = function (row, col) {\n            if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\n                throw row + ',' + col;\n            }\n            return _modules[row][col];\n        };\n        _this.getModuleCount = function () {\n            return _moduleCount;\n        };\n        _this.make = function () {\n            if (_typeNumber < 1) {\n                var typeNumber = 1;\n                for (; typeNumber < 40; typeNumber++) {\n                    var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, _errorCorrectionLevel);\n                    var buffer = qrBitBuffer();\n                    for (var i = 0; i < _dataList.length; i++) {\n                        var data = _dataList[i];\n                        buffer.put(data.getMode(), 4);\n                        buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));\n                        data.write(buffer);\n                    }\n                    var totalDataCount = 0;\n                    for (var i = 0; i < rsBlocks.length; i++) {\n                        totalDataCount += rsBlocks[i].dataCount;\n                    }\n                    if (buffer.getLengthInBits() <= totalDataCount * 8) {\n                        break;\n                    }\n                }\n                _typeNumber = typeNumber;\n            }\n            makeImpl(false, getBestMaskPattern());\n        };\n        _this.createTableTag = function (cellSize, margin) {\n            cellSize = cellSize || 2;\n            margin = (typeof margin == 'undefined') ? cellSize * 4 : margin;\n            var qrHtml = '';\n            qrHtml += '<table style=\"';\n            qrHtml += ' border-width: 0px; border-style: none;';\n            qrHtml += ' border-collapse: collapse;';\n            qrHtml += ' padding: 0px; margin: ' + margin + 'px;';\n            qrHtml += '\">';\n            qrHtml += '<tbody>';\n            for (var r = 0; r < _this.getModuleCount(); r += 1) {\n                qrHtml += '<tr>';\n                for (var c = 0; c < _this.getModuleCount(); c += 1) {\n                    qrHtml += '<td style=\"';\n                    qrHtml += ' border-width: 0px; border-style: none;';\n                    qrHtml += ' border-collapse: collapse;';\n                    qrHtml += ' padding: 0px; margin: 0px;';\n                    qrHtml += ' width: ' + cellSize + 'px;';\n                    qrHtml += ' height: ' + cellSize + 'px;';\n                    qrHtml += ' background-color: ';\n                    qrHtml += _this.isDark(r, c) ? '#000000' : '#ffffff';\n                    qrHtml += ';';\n                    qrHtml += '\"/>';\n                }\n                qrHtml += '</tr>';\n            }\n            qrHtml += '</tbody>';\n            qrHtml += '</table>';\n            return qrHtml;\n        };\n        _this.createSvgTag = function (cellSize, margin) {\n            cellSize = cellSize || 2;\n            margin = (typeof margin == 'undefined') ? cellSize * 4 : margin;\n            var size = _this.getModuleCount() * cellSize + margin * 2;\n            var c, mc, r, mr, qrSvg = '', rect;\n            rect = 'l' + cellSize + ',0 0,' + cellSize +\n                ' -' + cellSize + ',0 0,-' + cellSize + 'z ';\n            qrSvg += '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"';\n            qrSvg += ' width=\"' + size + 'px\"';\n            qrSvg += ' height=\"' + size + 'px\"';\n            qrSvg += ' viewBox=\"0 0 ' + size + ' ' + size + '\" ';\n            qrSvg += ' preserveAspectRatio=\"xMinYMin meet\">';\n            qrSvg += '<rect width=\"100%\" height=\"100%\" fill=\"white\" cx=\"0\" cy=\"0\"/>';\n            qrSvg += '<path d=\"';\n            for (r = 0; r < _this.getModuleCount(); r += 1) {\n                mr = r * cellSize + margin;\n                for (c = 0; c < _this.getModuleCount(); c += 1) {\n                    if (_this.isDark(r, c)) {\n                        mc = c * cellSize + margin;\n                        qrSvg += 'M' + mc + ',' + mr + rect;\n                    }\n                }\n            }\n            qrSvg += '\" stroke=\"transparent\" fill=\"black\"/>';\n            qrSvg += '</svg>';\n            return qrSvg;\n        };\n        _this.createDataURL = function (cellSize, margin, fillColor, backgroundColor) {\n            cellSize = cellSize || 2;\n            margin = (typeof margin == 'undefined') ? cellSize * 4 : margin;\n            var size = _this.getModuleCount() * cellSize + margin * 2;\n            var min = margin;\n            var max = size - margin;\n            return createDataURL(size, size, fillColor, backgroundColor, function (x, y) {\n                if (min <= x && x < max && min <= y && y < max) {\n                    var c = Math.floor((x - min) / cellSize);\n                    var r = Math.floor((y - min) / cellSize);\n                    return _this.isDark(r, c) ? 0 : 1;\n                }\n                else {\n                    return 1;\n                }\n            });\n        };\n        _this.createImgTag = function (cellSize, margin, alt, fillColor, backgroundColor) {\n            cellSize = cellSize || 2;\n            margin = (typeof margin == 'undefined') ? cellSize * 4 : margin;\n            var size = _this.getModuleCount() * cellSize + margin * 2;\n            var img = '';\n            img += '<img';\n            img += '\\u0020src=\"';\n            img += _this.createDataURL(cellSize, margin, fillColor, backgroundColor);\n            img += '\"';\n            img += '\\u0020width=\"';\n            img += size;\n            img += '\"';\n            img += '\\u0020height=\"';\n            img += size;\n            img += '\"';\n            if (alt) {\n                img += '\\u0020alt=\"';\n                img += alt;\n                img += '\"';\n            }\n            img += '/>';\n            return img;\n        };\n        var _createHalfASCII = function (margin) {\n            var cellSize = 1;\n            margin = (typeof margin == 'undefined') ? cellSize * 2 : margin;\n            var size = _this.getModuleCount() * cellSize + margin * 2;\n            var min = margin;\n            var max = size - margin;\n            var y, x, r1, r2, p;\n            var blocks = {\n                '██': '█',\n                '█ ': '▀',\n                ' █': '▄',\n                '  ': ' '\n            };\n            var ascii = '';\n            for (y = 0; y < size; y += 2) {\n                r1 = Math.floor((y - min) / cellSize);\n                r2 = Math.floor((y + 1 - min) / cellSize);\n                for (x = 0; x < size; x += 1) {\n                    p = '█';\n                    if (min <= x && x < max && min <= y && y < max && _this.isDark(r1, Math.floor((x - min) / cellSize))) {\n                        p = ' ';\n                    }\n                    if (min <= x && x < max && min <= y + 1 && y + 1 < max && _this.isDark(r2, Math.floor((x - min) / cellSize))) {\n                        p += ' ';\n                    }\n                    else {\n                        p += '█';\n                    }\n                    // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n                    ascii += blocks[p];\n                }\n                ascii += '\\n';\n            }\n            if (size % 2) {\n                return ascii.substring(0, ascii.length - size - 1) + Array(size + 1).join('▀');\n            }\n            return ascii.substring(0, ascii.length - 1);\n        };\n        _this.createASCII = function (cellSize, margin) {\n            cellSize = cellSize || 1;\n            if (cellSize < 2) {\n                return _createHalfASCII(margin);\n            }\n            cellSize -= 1;\n            margin = (typeof margin == 'undefined') ? cellSize * 2 : margin;\n            var size = _this.getModuleCount() * cellSize + margin * 2;\n            var min = margin;\n            var max = size - margin;\n            var y, x, r, p;\n            var white = Array(cellSize + 1).join('██');\n            var black = Array(cellSize + 1).join('  ');\n            var ascii = '';\n            var line = '';\n            for (y = 0; y < size; y += 1) {\n                r = Math.floor((y - min) / cellSize);\n                line = '';\n                for (x = 0; x < size; x += 1) {\n                    p = 1;\n                    if (min <= x && x < max && min <= y && y < max && _this.isDark(r, Math.floor((x - min) / cellSize))) {\n                        p = 0;\n                    }\n                    // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n                    line += p ? white : black;\n                }\n                for (r = 0; r < cellSize; r += 1) {\n                    ascii += line + '\\n';\n                }\n            }\n            return ascii.substring(0, ascii.length - 1);\n        };\n        _this.renderTo2dContext = function (context, cellSize) {\n            cellSize = cellSize || 2;\n            var length = _this.getModuleCount();\n            for (var row = 0; row < length; row++) {\n                for (var col = 0; col < length; col++) {\n                    context.fillStyle = _this.isDark(row, col) ? 'black' : 'white';\n                    context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);\n                }\n            }\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // qrcode.stringToBytes\n    //---------------------------------------------------------------------\n    qrcode.stringToBytesFuncs = {\n        'default': function (s) {\n            var bytes = [];\n            for (var i = 0; i < s.length; i += 1) {\n                var c = s.charCodeAt(i);\n                bytes.push(c & 0xff);\n            }\n            return bytes;\n        }\n    };\n    qrcode.stringToBytes = qrcode.stringToBytesFuncs['default'];\n    //---------------------------------------------------------------------\n    // qrcode.createStringToBytes\n    //---------------------------------------------------------------------\n    /**\n     * @param unicodeData base64 string of byte array.\n     * [16bit Unicode],[16bit Bytes], ...\n     * @param numChars\n     */\n    qrcode.createStringToBytes = function (unicodeData, numChars) {\n        // create conversion map.\n        var unicodeMap = function () {\n            var bin = base64DecodeInputStream(unicodeData);\n            var read = function () {\n                var b = bin.read();\n                if (b == -1)\n                    throw 'eof';\n                return b;\n            };\n            var count = 0;\n            var unicodeMap = {};\n            while (true) {\n                var b0 = bin.read();\n                if (b0 == -1)\n                    break;\n                var b1 = read();\n                var b2 = read();\n                var b3 = read();\n                var k = String.fromCharCode((b0 << 8) | b1);\n                var v = (b2 << 8) | b3;\n                unicodeMap[k] = v;\n                count += 1;\n            }\n            if (count != numChars) {\n                throw count + ' != ' + numChars;\n            }\n            return unicodeMap;\n        }();\n        var unknownChar = '?'.charCodeAt(0);\n        return function (s) {\n            var bytes = [];\n            for (var i = 0; i < s.length; i += 1) {\n                var c = s.charCodeAt(i);\n                if (c < 128) {\n                    bytes.push(c);\n                }\n                else {\n                    var b = unicodeMap[s.charAt(i)];\n                    if (typeof b == 'number') {\n                        if ((b & 0xff) == b) {\n                            // 1byte\n                            bytes.push(b);\n                        }\n                        else {\n                            // 2bytes\n                            bytes.push(b >>> 8);\n                            bytes.push(b & 0xff);\n                        }\n                    }\n                    else {\n                        bytes.push(unknownChar);\n                    }\n                }\n            }\n            return bytes;\n        };\n    };\n    //---------------------------------------------------------------------\n    // QRMode\n    //---------------------------------------------------------------------\n    var QRMode = {\n        MODE_NUMBER: 1 << 0,\n        MODE_ALPHA_NUM: 1 << 1,\n        MODE_8BIT_BYTE: 1 << 2,\n        MODE_KANJI: 1 << 3\n    };\n    //---------------------------------------------------------------------\n    // QRErrorCorrectionLevel\n    //---------------------------------------------------------------------\n    var QRErrorCorrectionLevel = {\n        L: 1,\n        M: 0,\n        Q: 3,\n        H: 2\n    };\n    //---------------------------------------------------------------------\n    // QRMaskPattern\n    //---------------------------------------------------------------------\n    var QRMaskPattern = {\n        PATTERN000: 0,\n        PATTERN001: 1,\n        PATTERN010: 2,\n        PATTERN011: 3,\n        PATTERN100: 4,\n        PATTERN101: 5,\n        PATTERN110: 6,\n        PATTERN111: 7\n    };\n    //---------------------------------------------------------------------\n    // QRUtil\n    //---------------------------------------------------------------------\n    var QRUtil = function () {\n        var PATTERN_POSITION_TABLE = [\n            [],\n            [6, 18],\n            [6, 22],\n            [6, 26],\n            [6, 30],\n            [6, 34],\n            [6, 22, 38],\n            [6, 24, 42],\n            [6, 26, 46],\n            [6, 28, 50],\n            [6, 30, 54],\n            [6, 32, 58],\n            [6, 34, 62],\n            [6, 26, 46, 66],\n            [6, 26, 48, 70],\n            [6, 26, 50, 74],\n            [6, 30, 54, 78],\n            [6, 30, 56, 82],\n            [6, 30, 58, 86],\n            [6, 34, 62, 90],\n            [6, 28, 50, 72, 94],\n            [6, 26, 50, 74, 98],\n            [6, 30, 54, 78, 102],\n            [6, 28, 54, 80, 106],\n            [6, 32, 58, 84, 110],\n            [6, 30, 58, 86, 114],\n            [6, 34, 62, 90, 118],\n            [6, 26, 50, 74, 98, 122],\n            [6, 30, 54, 78, 102, 126],\n            [6, 26, 52, 78, 104, 130],\n            [6, 30, 56, 82, 108, 134],\n            [6, 34, 60, 86, 112, 138],\n            [6, 30, 58, 86, 114, 142],\n            [6, 34, 62, 90, 118, 146],\n            [6, 30, 54, 78, 102, 126, 150],\n            [6, 24, 50, 76, 102, 128, 154],\n            [6, 28, 54, 80, 106, 132, 158],\n            [6, 32, 58, 84, 110, 136, 162],\n            [6, 26, 54, 82, 110, 138, 166],\n            [6, 30, 58, 86, 114, 142, 170]\n        ];\n        var G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);\n        var G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);\n        var G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);\n        var _this = {};\n        var getBCHDigit = function (data) {\n            var digit = 0;\n            while (data != 0) {\n                digit += 1;\n                data >>>= 1;\n            }\n            return digit;\n        };\n        _this.getBCHTypeInfo = function (data) {\n            var d = data << 10;\n            while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n                d ^= (G15 << (getBCHDigit(d) - getBCHDigit(G15)));\n            }\n            return ((data << 10) | d) ^ G15_MASK;\n        };\n        _this.getBCHTypeNumber = function (data) {\n            var d = data << 12;\n            while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n                d ^= (G18 << (getBCHDigit(d) - getBCHDigit(G18)));\n            }\n            return (data << 12) | d;\n        };\n        _this.getPatternPosition = function (typeNumber) {\n            return PATTERN_POSITION_TABLE[typeNumber - 1];\n        };\n        _this.getMaskFunction = function (maskPattern) {\n            switch (maskPattern) {\n                case QRMaskPattern.PATTERN000:\n                    return function (i, j) { return (i + j) % 2 == 0; };\n                case QRMaskPattern.PATTERN001:\n                    return function (i, j) { return i % 2 == 0; };\n                case QRMaskPattern.PATTERN010:\n                    return function (i, j) { return j % 3 == 0; };\n                case QRMaskPattern.PATTERN011:\n                    return function (i, j) { return (i + j) % 3 == 0; };\n                case QRMaskPattern.PATTERN100:\n                    return function (i, j) { return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0; };\n                case QRMaskPattern.PATTERN101:\n                    return function (i, j) { return (i * j) % 2 + (i * j) % 3 == 0; };\n                case QRMaskPattern.PATTERN110:\n                    return function (i, j) { return ((i * j) % 2 + (i * j) % 3) % 2 == 0; };\n                case QRMaskPattern.PATTERN111:\n                    return function (i, j) { return ((i * j) % 3 + (i + j) % 2) % 2 == 0; };\n                default:\n                    throw 'bad maskPattern:' + maskPattern;\n            }\n        };\n        _this.getErrorCorrectPolynomial = function (errorCorrectLength) {\n            var a = qrPolynomial([1], 0);\n            for (var i = 0; i < errorCorrectLength; i += 1) {\n                a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0));\n            }\n            return a;\n        };\n        _this.getLengthInBits = function (mode, type) {\n            if (1 <= type && type < 10) {\n                // 1 - 9\n                switch (mode) {\n                    case QRMode.MODE_NUMBER: return 10;\n                    case QRMode.MODE_ALPHA_NUM: return 9;\n                    case QRMode.MODE_8BIT_BYTE: return 8;\n                    case QRMode.MODE_KANJI: return 8;\n                    default:\n                        throw 'mode:' + mode;\n                }\n            }\n            else if (type < 27) {\n                // 10 - 26\n                switch (mode) {\n                    case QRMode.MODE_NUMBER: return 12;\n                    case QRMode.MODE_ALPHA_NUM: return 11;\n                    case QRMode.MODE_8BIT_BYTE: return 16;\n                    case QRMode.MODE_KANJI: return 10;\n                    default:\n                        throw 'mode:' + mode;\n                }\n            }\n            else if (type < 41) {\n                // 27 - 40\n                switch (mode) {\n                    case QRMode.MODE_NUMBER: return 14;\n                    case QRMode.MODE_ALPHA_NUM: return 13;\n                    case QRMode.MODE_8BIT_BYTE: return 16;\n                    case QRMode.MODE_KANJI: return 12;\n                    default:\n                        throw 'mode:' + mode;\n                }\n            }\n            else {\n                throw 'type:' + type;\n            }\n        };\n        _this.getLostPoint = function (qrcode) {\n            var moduleCount = qrcode.getModuleCount();\n            var lostPoint = 0;\n            // LEVEL1\n            for (var row = 0; row < moduleCount; row += 1) {\n                for (var col = 0; col < moduleCount; col += 1) {\n                    var sameCount = 0;\n                    var dark = qrcode.isDark(row, col);\n                    for (var r = -1; r <= 1; r += 1) {\n                        if (row + r < 0 || moduleCount <= row + r) {\n                            continue;\n                        }\n                        for (var c = -1; c <= 1; c += 1) {\n                            if (col + c < 0 || moduleCount <= col + c) {\n                                continue;\n                            }\n                            if (r == 0 && c == 0) {\n                                continue;\n                            }\n                            if (dark == qrcode.isDark(row + r, col + c)) {\n                                sameCount += 1;\n                            }\n                        }\n                    }\n                    if (sameCount > 5) {\n                        lostPoint += (3 + sameCount - 5);\n                    }\n                }\n            }\n            // LEVEL2\n            for (var row = 0; row < moduleCount - 1; row += 1) {\n                for (var col = 0; col < moduleCount - 1; col += 1) {\n                    var count = 0;\n                    if (qrcode.isDark(row, col))\n                        count += 1;\n                    if (qrcode.isDark(row + 1, col))\n                        count += 1;\n                    if (qrcode.isDark(row, col + 1))\n                        count += 1;\n                    if (qrcode.isDark(row + 1, col + 1))\n                        count += 1;\n                    if (count == 0 || count == 4) {\n                        lostPoint += 3;\n                    }\n                }\n            }\n            // LEVEL3\n            for (var row = 0; row < moduleCount; row += 1) {\n                for (var col = 0; col < moduleCount - 6; col += 1) {\n                    if (qrcode.isDark(row, col)\n                        && !qrcode.isDark(row, col + 1)\n                        && qrcode.isDark(row, col + 2)\n                        && qrcode.isDark(row, col + 3)\n                        && qrcode.isDark(row, col + 4)\n                        && !qrcode.isDark(row, col + 5)\n                        && qrcode.isDark(row, col + 6)) {\n                        lostPoint += 40;\n                    }\n                }\n            }\n            for (var col = 0; col < moduleCount; col += 1) {\n                for (var row = 0; row < moduleCount - 6; row += 1) {\n                    if (qrcode.isDark(row, col)\n                        && !qrcode.isDark(row + 1, col)\n                        && qrcode.isDark(row + 2, col)\n                        && qrcode.isDark(row + 3, col)\n                        && qrcode.isDark(row + 4, col)\n                        && !qrcode.isDark(row + 5, col)\n                        && qrcode.isDark(row + 6, col)) {\n                        lostPoint += 40;\n                    }\n                }\n            }\n            // LEVEL4\n            var darkCount = 0;\n            for (var col = 0; col < moduleCount; col += 1) {\n                for (var row = 0; row < moduleCount; row += 1) {\n                    if (qrcode.isDark(row, col)) {\n                        darkCount += 1;\n                    }\n                }\n            }\n            var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n            lostPoint += ratio * 10;\n            return lostPoint;\n        };\n        return _this;\n    }();\n    //---------------------------------------------------------------------\n    // QRMath\n    //---------------------------------------------------------------------\n    var QRMath = function () {\n        var EXP_TABLE = new Array(256);\n        var LOG_TABLE = new Array(256);\n        // initialize tables\n        for (var i = 0; i < 8; i += 1) {\n            EXP_TABLE[i] = 1 << i;\n        }\n        for (var i = 8; i < 256; i += 1) {\n            EXP_TABLE[i] = EXP_TABLE[i - 4]\n                ^ EXP_TABLE[i - 5]\n                ^ EXP_TABLE[i - 6]\n                ^ EXP_TABLE[i - 8];\n        }\n        for (var i = 0; i < 255; i += 1) {\n            LOG_TABLE[EXP_TABLE[i]] = i;\n        }\n        var _this = {};\n        _this.glog = function (n) {\n            if (n < 1) {\n                throw 'glog(' + n + ')';\n            }\n            return LOG_TABLE[n];\n        };\n        _this.gexp = function (n) {\n            while (n < 0) {\n                n += 255;\n            }\n            while (n >= 256) {\n                n -= 255;\n            }\n            return EXP_TABLE[n];\n        };\n        return _this;\n    }();\n    //---------------------------------------------------------------------\n    // qrPolynomial\n    //---------------------------------------------------------------------\n    function qrPolynomial(num, shift) {\n        if (typeof num.length == 'undefined') {\n            throw num.length + '/' + shift;\n        }\n        var _num = function () {\n            var offset = 0;\n            while (offset < num.length && num[offset] == 0) {\n                offset += 1;\n            }\n            var _num = new Array(num.length - offset + shift);\n            for (var i = 0; i < num.length - offset; i += 1) {\n                _num[i] = num[i + offset];\n            }\n            return _num;\n        }();\n        var _this = {};\n        _this.getAt = function (index) {\n            return _num[index];\n        };\n        _this.getLength = function () {\n            return _num.length;\n        };\n        _this.multiply = function (e) {\n            var num = new Array(_this.getLength() + e.getLength() - 1);\n            for (var i = 0; i < _this.getLength(); i += 1) {\n                for (var j = 0; j < e.getLength(); j += 1) {\n                    num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i)) + QRMath.glog(e.getAt(j)));\n                }\n            }\n            return qrPolynomial(num, 0);\n        };\n        _this.mod = function (e) {\n            if (_this.getLength() - e.getLength() < 0) {\n                return _this;\n            }\n            var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e.getAt(0));\n            var num = new Array(_this.getLength());\n            for (var i = 0; i < _this.getLength(); i += 1) {\n                num[i] = _this.getAt(i);\n            }\n            for (var i = 0; i < e.getLength(); i += 1) {\n                num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i)) + ratio);\n            }\n            // recursive call\n            return qrPolynomial(num, 0).mod(e);\n        };\n        return _this;\n    }\n    //---------------------------------------------------------------------\n    // QRRSBlock\n    //---------------------------------------------------------------------\n    var QRRSBlock = function () {\n        var RS_BLOCK_TABLE = [\n            // L\n            // M\n            // Q\n            // H\n            // 1\n            [1, 26, 19],\n            [1, 26, 16],\n            [1, 26, 13],\n            [1, 26, 9],\n            // 2\n            [1, 44, 34],\n            [1, 44, 28],\n            [1, 44, 22],\n            [1, 44, 16],\n            // 3\n            [1, 70, 55],\n            [1, 70, 44],\n            [2, 35, 17],\n            [2, 35, 13],\n            // 4\n            [1, 100, 80],\n            [2, 50, 32],\n            [2, 50, 24],\n            [4, 25, 9],\n            // 5\n            [1, 134, 108],\n            [2, 67, 43],\n            [2, 33, 15, 2, 34, 16],\n            [2, 33, 11, 2, 34, 12],\n            // 6\n            [2, 86, 68],\n            [4, 43, 27],\n            [4, 43, 19],\n            [4, 43, 15],\n            // 7\n            [2, 98, 78],\n            [4, 49, 31],\n            [2, 32, 14, 4, 33, 15],\n            [4, 39, 13, 1, 40, 14],\n            // 8\n            [2, 121, 97],\n            [2, 60, 38, 2, 61, 39],\n            [4, 40, 18, 2, 41, 19],\n            [4, 40, 14, 2, 41, 15],\n            // 9\n            [2, 146, 116],\n            [3, 58, 36, 2, 59, 37],\n            [4, 36, 16, 4, 37, 17],\n            [4, 36, 12, 4, 37, 13],\n            // 10\n            [2, 86, 68, 2, 87, 69],\n            [4, 69, 43, 1, 70, 44],\n            [6, 43, 19, 2, 44, 20],\n            [6, 43, 15, 2, 44, 16],\n            // 11\n            [4, 101, 81],\n            [1, 80, 50, 4, 81, 51],\n            [4, 50, 22, 4, 51, 23],\n            [3, 36, 12, 8, 37, 13],\n            // 12\n            [2, 116, 92, 2, 117, 93],\n            [6, 58, 36, 2, 59, 37],\n            [4, 46, 20, 6, 47, 21],\n            [7, 42, 14, 4, 43, 15],\n            // 13\n            [4, 133, 107],\n            [8, 59, 37, 1, 60, 38],\n            [8, 44, 20, 4, 45, 21],\n            [12, 33, 11, 4, 34, 12],\n            // 14\n            [3, 145, 115, 1, 146, 116],\n            [4, 64, 40, 5, 65, 41],\n            [11, 36, 16, 5, 37, 17],\n            [11, 36, 12, 5, 37, 13],\n            // 15\n            [5, 109, 87, 1, 110, 88],\n            [5, 65, 41, 5, 66, 42],\n            [5, 54, 24, 7, 55, 25],\n            [11, 36, 12, 7, 37, 13],\n            // 16\n            [5, 122, 98, 1, 123, 99],\n            [7, 73, 45, 3, 74, 46],\n            [15, 43, 19, 2, 44, 20],\n            [3, 45, 15, 13, 46, 16],\n            // 17\n            [1, 135, 107, 5, 136, 108],\n            [10, 74, 46, 1, 75, 47],\n            [1, 50, 22, 15, 51, 23],\n            [2, 42, 14, 17, 43, 15],\n            // 18\n            [5, 150, 120, 1, 151, 121],\n            [9, 69, 43, 4, 70, 44],\n            [17, 50, 22, 1, 51, 23],\n            [2, 42, 14, 19, 43, 15],\n            // 19\n            [3, 141, 113, 4, 142, 114],\n            [3, 70, 44, 11, 71, 45],\n            [17, 47, 21, 4, 48, 22],\n            [9, 39, 13, 16, 40, 14],\n            // 20\n            [3, 135, 107, 5, 136, 108],\n            [3, 67, 41, 13, 68, 42],\n            [15, 54, 24, 5, 55, 25],\n            [15, 43, 15, 10, 44, 16],\n            // 21\n            [4, 144, 116, 4, 145, 117],\n            [17, 68, 42],\n            [17, 50, 22, 6, 51, 23],\n            [19, 46, 16, 6, 47, 17],\n            // 22\n            [2, 139, 111, 7, 140, 112],\n            [17, 74, 46],\n            [7, 54, 24, 16, 55, 25],\n            [34, 37, 13],\n            // 23\n            [4, 151, 121, 5, 152, 122],\n            [4, 75, 47, 14, 76, 48],\n            [11, 54, 24, 14, 55, 25],\n            [16, 45, 15, 14, 46, 16],\n            // 24\n            [6, 147, 117, 4, 148, 118],\n            [6, 73, 45, 14, 74, 46],\n            [11, 54, 24, 16, 55, 25],\n            [30, 46, 16, 2, 47, 17],\n            // 25\n            [8, 132, 106, 4, 133, 107],\n            [8, 75, 47, 13, 76, 48],\n            [7, 54, 24, 22, 55, 25],\n            [22, 45, 15, 13, 46, 16],\n            // 26\n            [10, 142, 114, 2, 143, 115],\n            [19, 74, 46, 4, 75, 47],\n            [28, 50, 22, 6, 51, 23],\n            [33, 46, 16, 4, 47, 17],\n            // 27\n            [8, 152, 122, 4, 153, 123],\n            [22, 73, 45, 3, 74, 46],\n            [8, 53, 23, 26, 54, 24],\n            [12, 45, 15, 28, 46, 16],\n            // 28\n            [3, 147, 117, 10, 148, 118],\n            [3, 73, 45, 23, 74, 46],\n            [4, 54, 24, 31, 55, 25],\n            [11, 45, 15, 31, 46, 16],\n            // 29\n            [7, 146, 116, 7, 147, 117],\n            [21, 73, 45, 7, 74, 46],\n            [1, 53, 23, 37, 54, 24],\n            [19, 45, 15, 26, 46, 16],\n            // 30\n            [5, 145, 115, 10, 146, 116],\n            [19, 75, 47, 10, 76, 48],\n            [15, 54, 24, 25, 55, 25],\n            [23, 45, 15, 25, 46, 16],\n            // 31\n            [13, 145, 115, 3, 146, 116],\n            [2, 74, 46, 29, 75, 47],\n            [42, 54, 24, 1, 55, 25],\n            [23, 45, 15, 28, 46, 16],\n            // 32\n            [17, 145, 115],\n            [10, 74, 46, 23, 75, 47],\n            [10, 54, 24, 35, 55, 25],\n            [19, 45, 15, 35, 46, 16],\n            // 33\n            [17, 145, 115, 1, 146, 116],\n            [14, 74, 46, 21, 75, 47],\n            [29, 54, 24, 19, 55, 25],\n            [11, 45, 15, 46, 46, 16],\n            // 34\n            [13, 145, 115, 6, 146, 116],\n            [14, 74, 46, 23, 75, 47],\n            [44, 54, 24, 7, 55, 25],\n            [59, 46, 16, 1, 47, 17],\n            // 35\n            [12, 151, 121, 7, 152, 122],\n            [12, 75, 47, 26, 76, 48],\n            [39, 54, 24, 14, 55, 25],\n            [22, 45, 15, 41, 46, 16],\n            // 36\n            [6, 151, 121, 14, 152, 122],\n            [6, 75, 47, 34, 76, 48],\n            [46, 54, 24, 10, 55, 25],\n            [2, 45, 15, 64, 46, 16],\n            // 37\n            [17, 152, 122, 4, 153, 123],\n            [29, 74, 46, 14, 75, 47],\n            [49, 54, 24, 10, 55, 25],\n            [24, 45, 15, 46, 46, 16],\n            // 38\n            [4, 152, 122, 18, 153, 123],\n            [13, 74, 46, 32, 75, 47],\n            [48, 54, 24, 14, 55, 25],\n            [42, 45, 15, 32, 46, 16],\n            // 39\n            [20, 147, 117, 4, 148, 118],\n            [40, 75, 47, 7, 76, 48],\n            [43, 54, 24, 22, 55, 25],\n            [10, 45, 15, 67, 46, 16],\n            // 40\n            [19, 148, 118, 6, 149, 119],\n            [18, 75, 47, 31, 76, 48],\n            [34, 54, 24, 34, 55, 25],\n            [20, 45, 15, 61, 46, 16]\n        ];\n        var qrRSBlock = function (totalCount, dataCount) {\n            var _this = {};\n            _this.totalCount = totalCount;\n            _this.dataCount = dataCount;\n            return _this;\n        };\n        var _this = {};\n        var getRsBlockTable = function (typeNumber, errorCorrectionLevel) {\n            switch (errorCorrectionLevel) {\n                case QRErrorCorrectionLevel.L:\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n                case QRErrorCorrectionLevel.M:\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n                case QRErrorCorrectionLevel.Q:\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n                case QRErrorCorrectionLevel.H:\n                    return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n                default:\n                    return undefined;\n            }\n        };\n        _this.getRSBlocks = function (typeNumber, errorCorrectionLevel) {\n            var rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);\n            if (typeof rsBlock == 'undefined') {\n                throw 'bad rs block @ typeNumber:' + typeNumber +\n                    '/errorCorrectionLevel:' + errorCorrectionLevel;\n            }\n            var length = rsBlock.length / 3;\n            var list = [];\n            for (var i = 0; i < length; i += 1) {\n                var count = rsBlock[i * 3 + 0];\n                var totalCount = rsBlock[i * 3 + 1];\n                var dataCount = rsBlock[i * 3 + 2];\n                for (var j = 0; j < count; j += 1) {\n                    list.push(qrRSBlock(totalCount, dataCount));\n                }\n            }\n            return list;\n        };\n        return _this;\n    }();\n    //---------------------------------------------------------------------\n    // qrBitBuffer\n    //---------------------------------------------------------------------\n    var qrBitBuffer = function () {\n        var _buffer = [];\n        var _length = 0;\n        var _this = {};\n        _this.getBuffer = function () {\n            return _buffer;\n        };\n        _this.getAt = function (index) {\n            var bufIndex = Math.floor(index / 8);\n            return ((_buffer[bufIndex] >>> (7 - index % 8)) & 1) == 1;\n        };\n        _this.put = function (num, length) {\n            for (var i = 0; i < length; i += 1) {\n                _this.putBit(((num >>> (length - i - 1)) & 1) == 1);\n            }\n        };\n        _this.getLengthInBits = function () {\n            return _length;\n        };\n        _this.putBit = function (bit) {\n            var bufIndex = Math.floor(_length / 8);\n            if (_buffer.length <= bufIndex) {\n                _buffer.push(0);\n            }\n            if (bit) {\n                _buffer[bufIndex] |= (0x80 >>> (_length % 8));\n            }\n            _length += 1;\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // qrNumber\n    //---------------------------------------------------------------------\n    var qrNumber = function (data) {\n        var _mode = QRMode.MODE_NUMBER;\n        var _data = data;\n        var _this = {};\n        _this.getMode = function () {\n            return _mode;\n        };\n        _this.getLength = function (buffer) {\n            return _data.length;\n        };\n        _this.write = function (buffer) {\n            var data = _data;\n            var i = 0;\n            while (i + 2 < data.length) {\n                buffer.put(strToNum(data.substring(i, i + 3)), 10);\n                i += 3;\n            }\n            if (i < data.length) {\n                if (data.length - i == 1) {\n                    buffer.put(strToNum(data.substring(i, i + 1)), 4);\n                }\n                else if (data.length - i == 2) {\n                    buffer.put(strToNum(data.substring(i, i + 2)), 7);\n                }\n            }\n        };\n        var strToNum = function (s) {\n            var num = 0;\n            for (var i = 0; i < s.length; i += 1) {\n                num = num * 10 + chatToNum(s.charAt(i));\n            }\n            return num;\n        };\n        var chatToNum = function (c) {\n            if ('0' <= c && c <= '9') {\n                return c.charCodeAt(0) - '0'.charCodeAt(0);\n            }\n            throw 'illegal char :' + c;\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // qrAlphaNum\n    //---------------------------------------------------------------------\n    var qrAlphaNum = function (data) {\n        var _mode = QRMode.MODE_ALPHA_NUM;\n        var _data = data;\n        var _this = {};\n        _this.getMode = function () {\n            return _mode;\n        };\n        _this.getLength = function (buffer) {\n            return _data.length;\n        };\n        _this.write = function (buffer) {\n            var s = _data;\n            var i = 0;\n            while (i + 1 < s.length) {\n                buffer.put(getCode(s.charAt(i)) * 45 +\n                    getCode(s.charAt(i + 1)), 11);\n                i += 2;\n            }\n            if (i < s.length) {\n                buffer.put(getCode(s.charAt(i)), 6);\n            }\n        };\n        var getCode = function (c) {\n            if ('0' <= c && c <= '9') {\n                return c.charCodeAt(0) - '0'.charCodeAt(0);\n            }\n            else if ('A' <= c && c <= 'Z') {\n                return c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n            }\n            else {\n                switch (c) {\n                    case ' ': return 36;\n                    case '$': return 37;\n                    case '%': return 38;\n                    case '*': return 39;\n                    case '+': return 40;\n                    case '-': return 41;\n                    case '.': return 42;\n                    case '/': return 43;\n                    case ':': return 44;\n                    default:\n                        throw 'illegal char :' + c;\n                }\n            }\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // qr8BitByte\n    //---------------------------------------------------------------------\n    var qr8BitByte = function (data) {\n        var _mode = QRMode.MODE_8BIT_BYTE;\n        var _bytes = qrcode.stringToBytes(data);\n        var _this = {};\n        _this.getMode = function () {\n            return _mode;\n        };\n        _this.getLength = function (buffer) {\n            return _bytes.length;\n        };\n        _this.write = function (buffer) {\n            for (var i = 0; i < _bytes.length; i += 1) {\n                buffer.put(_bytes[i], 8);\n            }\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // qrKanji\n    //---------------------------------------------------------------------\n    var qrKanji = function (data) {\n        var _mode = QRMode.MODE_KANJI;\n        var stringToBytes = qrcode.stringToBytesFuncs['SJIS'];\n        if (!stringToBytes) {\n            throw 'sjis not supported.';\n        }\n        !function (c, code) {\n            // self test for sjis support.\n            var test = stringToBytes(c);\n            if (test.length != 2 || ((test[0] << 8) | test[1]) != code) {\n                throw 'sjis not supported.';\n            }\n        }('\\u53cb', 0x9746);\n        var _bytes = stringToBytes(data);\n        var _this = {};\n        _this.getMode = function () {\n            return _mode;\n        };\n        _this.getLength = function (buffer) {\n            return ~~(_bytes.length / 2);\n        };\n        _this.write = function (buffer) {\n            var data = _bytes;\n            var i = 0;\n            while (i + 1 < data.length) {\n                var c = ((0xff & data[i]) << 8) | (0xff & data[i + 1]);\n                if (0x8140 <= c && c <= 0x9FFC) {\n                    c -= 0x8140;\n                }\n                else if (0xE040 <= c && c <= 0xEBBF) {\n                    c -= 0xC140;\n                }\n                else {\n                    throw 'illegal char at ' + (i + 1) + '/' + c;\n                }\n                c = ((c >>> 8) & 0xff) * 0xC0 + (c & 0xff);\n                buffer.put(c, 13);\n                i += 2;\n            }\n            if (i < data.length) {\n                throw 'illegal char at ' + (i + 1);\n            }\n        };\n        return _this;\n    };\n    //=====================================================================\n    // GIF Support etc.\n    //\n    //---------------------------------------------------------------------\n    // byteArrayOutputStream\n    //---------------------------------------------------------------------\n    var byteArrayOutputStream = function () {\n        var _bytes = [];\n        var _this = {};\n        _this.writeByte = function (b) {\n            _bytes.push(b & 0xff);\n        };\n        _this.writeShort = function (i) {\n            _this.writeByte(i);\n            _this.writeByte(i >>> 8);\n        };\n        _this.writeBytes = function (b, off, len) {\n            off = off || 0;\n            len = len || b.length;\n            for (var i = 0; i < len; i += 1) {\n                _this.writeByte(b[i + off]);\n            }\n        };\n        _this.writeString = function (s) {\n            for (var i = 0; i < s.length; i += 1) {\n                _this.writeByte(s.charCodeAt(i));\n            }\n        };\n        _this.toByteArray = function () {\n            return _bytes;\n        };\n        _this.toString = function () {\n            var s = '';\n            s += '[';\n            for (var i = 0; i < _bytes.length; i += 1) {\n                if (i > 0) {\n                    s += ',';\n                }\n                s += _bytes[i];\n            }\n            s += ']';\n            return s;\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // base64EncodeOutputStream\n    //---------------------------------------------------------------------\n    var base64EncodeOutputStream = function () {\n        var _buffer = 0;\n        var _buflen = 0;\n        var _length = 0;\n        var _base64 = '';\n        var _this = {};\n        var writeEncoded = function (b) {\n            _base64 += String.fromCharCode(encode(b & 0x3f));\n        };\n        var encode = function (n) {\n            if (n < 0)\n                ;\n            else if (n < 26) {\n                return 0x41 + n;\n            }\n            else if (n < 52) {\n                return 0x61 + (n - 26);\n            }\n            else if (n < 62) {\n                return 0x30 + (n - 52);\n            }\n            else if (n == 62) {\n                return 0x2b;\n            }\n            else if (n == 63) {\n                return 0x2f;\n            }\n            throw 'n:' + n;\n        };\n        _this.writeByte = function (n) {\n            _buffer = (_buffer << 8) | (n & 0xff);\n            _buflen += 8;\n            _length += 1;\n            while (_buflen >= 6) {\n                writeEncoded(_buffer >>> (_buflen - 6));\n                _buflen -= 6;\n            }\n        };\n        _this.flush = function () {\n            if (_buflen > 0) {\n                writeEncoded(_buffer << (6 - _buflen));\n                _buffer = 0;\n                _buflen = 0;\n            }\n            if (_length % 3 != 0) {\n                // padding\n                var padlen = 3 - _length % 3;\n                for (var i = 0; i < padlen; i += 1) {\n                    _base64 += '=';\n                }\n            }\n        };\n        _this.toString = function () {\n            return _base64;\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // base64DecodeInputStream\n    //---------------------------------------------------------------------\n    var base64DecodeInputStream = function (str) {\n        var _str = str;\n        var _pos = 0;\n        var _buffer = 0;\n        var _buflen = 0;\n        var _this = {};\n        _this.read = function () {\n            while (_buflen < 8) {\n                if (_pos >= _str.length) {\n                    if (_buflen == 0) {\n                        return -1;\n                    }\n                    throw 'unexpected end of file./' + _buflen;\n                }\n                var c = _str.charAt(_pos);\n                _pos += 1;\n                if (c == '=') {\n                    _buflen = 0;\n                    return -1;\n                }\n                else if (c.match(/^\\s$/)) {\n                    // ignore if whitespace.\n                    continue;\n                }\n                _buffer = (_buffer << 6) | decode(c.charCodeAt(0));\n                _buflen += 6;\n            }\n            var n = (_buffer >>> (_buflen - 8)) & 0xff;\n            _buflen -= 8;\n            return n;\n        };\n        var decode = function (c) {\n            if (0x41 <= c && c <= 0x5a) {\n                return c - 0x41;\n            }\n            else if (0x61 <= c && c <= 0x7a) {\n                return c - 0x61 + 26;\n            }\n            else if (0x30 <= c && c <= 0x39) {\n                return c - 0x30 + 52;\n            }\n            else if (c == 0x2b) {\n                return 62;\n            }\n            else if (c == 0x2f) {\n                return 63;\n            }\n            else {\n                throw 'c:' + c;\n            }\n        };\n        return _this;\n    };\n    //---------------------------------------------------------------------\n    // gifImage (B/W)\n    //---------------------------------------------------------------------\n    var gifImage = function (width, height, fillColor, backgroundColor) {\n        var _width = width;\n        var _height = height;\n        var _data = new Array(width * height);\n        var _this = {};\n        _this.setPixel = function (x, y, pixel) {\n            _data[y * _width + x] = pixel;\n        };\n        _this.write = function (out) {\n            //---------------------------------\n            // GIF Signature\n            out.writeString('GIF87a');\n            //---------------------------------\n            // Screen Descriptor\n            out.writeShort(_width);\n            out.writeShort(_height);\n            out.writeByte(0x80); // 2bit\n            out.writeByte(0);\n            out.writeByte(0);\n            //---------------------------------\n            // Global Color Map\n            // Fill color, default black\n            out.writeByte(fillColor && fillColor.length >= 6 ? parseInt('0x' + fillColor.substr(0, 2)) : 0x00);\n            out.writeByte(fillColor && fillColor.length >= 6 ? parseInt('0x' + fillColor.substr(2, 2)) : 0x00);\n            out.writeByte(fillColor && fillColor.length >= 6 ? parseInt('0x' + fillColor.substr(4, 2)) : 0x00);\n            // Background color, default white\n            out.writeByte(backgroundColor && backgroundColor.length >= 6 ? parseInt('0x' + backgroundColor.substr(0, 2)) : 0xff);\n            out.writeByte(backgroundColor && backgroundColor.length >= 6 ? parseInt('0x' + backgroundColor.substr(2, 2)) : 0xff);\n            out.writeByte(backgroundColor && backgroundColor.length >= 6 ? parseInt('0x' + backgroundColor.substr(4, 2)) : 0xff);\n            //---------------------------------\n            // Image Descriptor\n            out.writeString(',');\n            out.writeShort(0);\n            out.writeShort(0);\n            out.writeShort(_width);\n            out.writeShort(_height);\n            out.writeByte(0);\n            //---------------------------------\n            // Local Color Map\n            //---------------------------------\n            // Raster Data\n            var lzwMinCodeSize = 2;\n            var raster = getLZWRaster(lzwMinCodeSize);\n            out.writeByte(lzwMinCodeSize);\n            var offset = 0;\n            while (raster.length - offset > 255) {\n                out.writeByte(255);\n                out.writeBytes(raster, offset, 255);\n                offset += 255;\n            }\n            out.writeByte(raster.length - offset);\n            out.writeBytes(raster, offset, raster.length - offset);\n            out.writeByte(0x00);\n            //---------------------------------\n            // GIF Terminator\n            out.writeString(';');\n        };\n        var bitOutputStream = function (out) {\n            var _out = out;\n            var _bitLength = 0;\n            var _bitBuffer = 0;\n            var _this = {};\n            _this.write = function (data, length) {\n                if ((data >>> length) != 0) {\n                    throw 'length over';\n                }\n                while (_bitLength + length >= 8) {\n                    _out.writeByte(0xff & ((data << _bitLength) | _bitBuffer));\n                    length -= (8 - _bitLength);\n                    data >>>= (8 - _bitLength);\n                    _bitBuffer = 0;\n                    _bitLength = 0;\n                }\n                _bitBuffer = (data << _bitLength) | _bitBuffer;\n                _bitLength = _bitLength + length;\n            };\n            _this.flush = function () {\n                if (_bitLength > 0) {\n                    _out.writeByte(_bitBuffer);\n                }\n            };\n            return _this;\n        };\n        var getLZWRaster = function (lzwMinCodeSize) {\n            var clearCode = 1 << lzwMinCodeSize;\n            var endCode = (1 << lzwMinCodeSize) + 1;\n            var bitLength = lzwMinCodeSize + 1;\n            // Setup LZWTable\n            var table = lzwTable();\n            for (var i = 0; i < clearCode; i += 1) {\n                table.add(String.fromCharCode(i));\n            }\n            table.add(String.fromCharCode(clearCode));\n            table.add(String.fromCharCode(endCode));\n            var byteOut = byteArrayOutputStream();\n            var bitOut = bitOutputStream(byteOut);\n            // clear code\n            bitOut.write(clearCode, bitLength);\n            var dataIndex = 0;\n            var s = String.fromCharCode(_data[dataIndex]);\n            dataIndex += 1;\n            while (dataIndex < _data.length) {\n                var c = String.fromCharCode(_data[dataIndex]);\n                dataIndex += 1;\n                if (table.contains(s + c)) {\n                    s = s + c;\n                }\n                else {\n                    bitOut.write(table.indexOf(s), bitLength);\n                    if (table.size() < 0xfff) {\n                        if (table.size() == (1 << bitLength)) {\n                            bitLength += 1;\n                        }\n                        table.add(s + c);\n                    }\n                    s = c;\n                }\n            }\n            bitOut.write(table.indexOf(s), bitLength);\n            // end code\n            bitOut.write(endCode, bitLength);\n            bitOut.flush();\n            return byteOut.toByteArray();\n        };\n        var lzwTable = function () {\n            var _map = {};\n            var _size = 0;\n            var _this = {};\n            _this.add = function (key) {\n                if (_this.contains(key)) {\n                    throw 'dup key:' + key;\n                }\n                _map[key] = _size;\n                _size += 1;\n            };\n            _this.size = function () {\n                return _size;\n            };\n            _this.indexOf = function (key) {\n                return _map[key];\n            };\n            _this.contains = function (key) {\n                return typeof _map[key] != 'undefined';\n            };\n            return _this;\n        };\n        return _this;\n    };\n    var createDataURL = function (width, height, fillColor, backgroundColor, getPixel) {\n        var gif = gifImage(width, height, fillColor, backgroundColor);\n        for (var y = 0; y < height; y += 1) {\n            for (var x = 0; x < width; x += 1) {\n                gif.setPixel(x, y, getPixel(x, y));\n            }\n        }\n        var b = byteArrayOutputStream();\n        gif.write(b);\n        var base64 = base64EncodeOutputStream();\n        var bytes = b.toByteArray();\n        for (var i = 0; i < bytes.length; i += 1) {\n            base64.writeByte(bytes[i]);\n        }\n        base64.flush();\n        return 'data:image/gif;base64,' + base64;\n    };\n    //---------------------------------------------------------------------\n    // returns qrcode function.\n    return qrcode;\n}();\n// multibyte support\n!function () {\n    qrcode.stringToBytesFuncs['UTF-8'] = function (s) {\n        // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n        function toUTF8Array(str) {\n            var utf8 = [];\n            for (var i = 0; i < str.length; i++) {\n                var charcode = str.charCodeAt(i);\n                if (charcode < 0x80)\n                    utf8.push(charcode);\n                else if (charcode < 0x800) {\n                    utf8.push(0xc0 | (charcode >> 6), 0x80 | (charcode & 0x3f));\n                }\n                else if (charcode < 0xd800 || charcode >= 0xe000) {\n                    utf8.push(0xe0 | (charcode >> 12), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));\n                }\n                // surrogate pair\n                else {\n                    i++;\n                    // UTF-16 encodes 0x10000-0x10FFFF by\n                    // subtracting 0x10000 and splitting the\n                    // 20 bits of 0x0-0xFFFFF into two halves\n                    charcode = 0x10000 + (((charcode & 0x3ff) << 10)\n                        | (str.charCodeAt(i) & 0x3ff));\n                    utf8.push(0xf0 | (charcode >> 18), 0x80 | ((charcode >> 12) & 0x3f), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));\n                }\n            }\n            return utf8;\n        }\n        return toUTF8Array(s);\n    };\n}();\nvar DeckdeckgoQRCodeType;\n(function (DeckdeckgoQRCodeType) {\n    DeckdeckgoQRCodeType[\"SVG\"] = \"svg\";\n    DeckdeckgoQRCodeType[\"IMG\"] = \"img\";\n})(DeckdeckgoQRCodeType || (DeckdeckgoQRCodeType = {}));\nvar DeckdeckgoQRCode = /** @class */ (function () {\n    function DeckdeckgoQRCode(hostRef) {\n        registerInstance(this, hostRef);\n        this.type = DeckdeckgoQRCodeType.SVG;\n    }\n    DeckdeckgoQRCode.prototype.componentDidLoad = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.generate()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    DeckdeckgoQRCode.prototype.generate = function () {\n        var _this_1 = this;\n        return new Promise(function (resolve) { return __awaiter(_this_1, void 0, void 0, function () {\n            var qrCode;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.createQRCode()];\n                    case 1:\n                        qrCode = _a.sent();\n                        return [4 /*yield*/, this.parseQRCode(qrCode)];\n                    case 2:\n                        _a.sent();\n                        resolve();\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    DeckdeckgoQRCode.prototype.createQRCode = function () {\n        var _this_1 = this;\n        return new Promise(function (resolve) {\n            if (!_this_1.content || _this_1.content.length <= 0) {\n                resolve(null);\n                return;\n            }\n            var qrGenerator = qrcode(0, 'H');\n            qrGenerator.addData(_this_1.content, 'Byte');\n            qrGenerator.make();\n            var qrCode = _this_1.isQRCodeTypeImg() ? qrGenerator.createImgTag(_this_1.qrCellSize, _this_1.qrMargin, _this_1.qrAlt, _this_1.qrFillColor, _this_1.qrBackgroundColor) : qrGenerator.createSvgTag(_this_1.qrCellSize, _this_1.qrMargin);\n            resolve(qrCode);\n        });\n    };\n    DeckdeckgoQRCode.prototype.parseQRCode = function (qrCode) {\n        var _this_1 = this;\n        return new Promise(function (resolve) { return __awaiter(_this_1, void 0, void 0, function () {\n            var container, template;\n            return __generator(this, function (_a) {\n                if (!qrCode) {\n                    resolve();\n                    return [2 /*return*/];\n                }\n                container = this.el.shadowRoot.querySelector('div.deckgo-qrcode-container');\n                if (container) {\n                    this.removePreviousQRCode(container);\n                    try {\n                        template = document.createElement('template');\n                        template.innerHTML = qrCode;\n                        container.appendChild(template.content.firstChild);\n                    }\n                    catch (err) {\n                        // Then we don't generate a QR code\n                    }\n                }\n                resolve();\n                return [2 /*return*/];\n            });\n        }); });\n    };\n    DeckdeckgoQRCode.prototype.removePreviousQRCode = function (container) {\n        var svg = container.querySelector('svg');\n        if (svg) {\n            svg.parentNode.removeChild(svg);\n        }\n        var img = container.querySelector('img');\n        if (img) {\n            img.parentNode.removeChild(img);\n        }\n    };\n    DeckdeckgoQRCode.prototype.isQRCodeTypeImg = function () {\n        return this.type === DeckdeckgoQRCodeType.IMG;\n    };\n    DeckdeckgoQRCode.prototype.render = function () {\n        return h(\"div\", { class: \"deckgo-qrcode-container\" }, h(\"slot\", { name: \"logo\" }));\n    };\n    Object.defineProperty(DeckdeckgoQRCode.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DeckdeckgoQRCode, \"style\", {\n        get: function () { return \":host{position:relative}:host,div.deckgo-qrcode-container{display:var(--deckgo-qrcode-container-display,inline-block)}div.deckgo-qrcode-container svg{width:var(--deckgo-qrcode-size);height:var(--deckgo-qrcode-size);stroke:var(--deckgo-qrcode-border-stroke)}div.deckgo-qrcode-container svg rect{fill:var(--deckgo-qrcode-background-fill,transparent)}div.deckgo-qrcode-container svg path{fill:var(--deckgo-qrcode-color-fill)}::slotted([slot=logo]){width:calc(var(--deckgo-qrcode-size, 100%) / var(--deckgo-qrcode-logo-ratio-size, 3));height:calc(var(--deckgo-qrcode-size, 100%) / var(--deckgo-qrcode-logo-ratio-size, 3));position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return DeckdeckgoQRCode;\n}());\nexport { DeckdeckgoQRCode as deckgo_qrcode };\n"],"sourceRoot":""}